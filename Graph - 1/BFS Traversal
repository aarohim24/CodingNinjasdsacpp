Problem statement
Given an undirected and disconnected graph G(V, E), print its BFS traversal.

Note:

1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2

//code
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void bfs(int startVertex, vector<vector<int>>& adjMatrix, vector<bool>& visited) {
    queue<int> q;
    q.push(startVertex);
    visited[startVertex] = true;

    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        cout << currentVertex << " ";

        for (int i = 0; i < adjMatrix.size(); i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

void bfsTraversal(int V, vector<vector<int>>& adjMatrix) {
    vector<bool> visited(V, false);

    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            bfs(i, adjMatrix, visited);
        }
    }
}

int main() {
    int V, E;
    cin >> V >> E;

    vector<vector<int>> adjMatrix(V, vector<int>(V, 0));

    for (int i = 0; i < E; i++) {
        int a, b;
        cin >> a >> b;
        adjMatrix[a][b] = 1;
        adjMatrix[b][a] = 1;
    }

    bfsTraversal(V, adjMatrix);

    return 0;
}
