Problem statement
Gary has a board of size NxM. Each cell in the board is a coloured dot. There exist only 26 colours denoted by uppercase Latin characters (i.e. A,B,...,Z). Now Gary is getting bored and wants to play a game. The key of this game is to find a cycle that contain dots of same colour. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:

1. These k dots are different: if i ≠ j then di is different from dj.
2. k is at least 4.
3. All dots belong to the same colour.
4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge.
Since Gary is colour blind, he wants your help. Your task is to determine if there exists a cycle on the board.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
2 <= N <= 1000
2 <= M <= 1000
Time Limit: 1 second
Sample Input 1:
3 4
AAAA
ABCA
AAAA
Sample Output 1:
true

//code
#include <iostream>
#include <vector>
#include <string>

using namespace std;

int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

bool isValid(int x, int y, int n, int m) {
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool dfs(vector<vector<char>>& grid, int x, int y, int fromX, int fromY, vector<vector<bool>>& visited, char c) {
    visited[x][y] = true;

    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (isValid(nx, ny, grid.size(), grid[0].size())) {
            if (!visited[nx][ny] && grid[nx][ny] == c) {
                if (dfs(grid, nx, ny, x, y, visited, c)) {
                    return true;
                }
            } else if (nx != fromX || ny != fromY) {
                if (visited[nx][ny] && grid[nx][ny] == c) {
                    return true;
                }
            }
        }
    }

    return false;
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<char>> grid(n, vector<char>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> grid[i][j];
        }
    }

    vector<vector<bool>> visited(n, vector<bool>(m, false));
    bool foundCycle = false;

    for (int i = 0; i < n && !foundCycle; i++) {
        for (int j = 0; j < m && !foundCycle; j++) {
            if (!visited[i][j]) {
                if (dfs(grid, i, j, -1, -1, visited, grid[i][j])) {
                    foundCycle = true;
                }
            }
        }
    }

    cout << (foundCycle ? "true" : "false") << endl;

    return 0;
}
