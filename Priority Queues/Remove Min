Problem statement
Implement the function RemoveMin for the min priority queue class.

For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.

Note : main function is given for your reference which we are using internally to test the code.

//code
  #include <vector>
using namespace std;

class PriorityQueue {
    vector<int> pq;

public:
    bool isEmpty() { 
        return pq.size() == 0; 
    }

    int getSize() { 
        return pq.size(); 
    }

    int getMin() {
        if (isEmpty()) {
            return 0; // Assuming 0 as a default value when the priority queue is empty
        }

        return pq[0];
    }

    void insert(int element) {
        pq.push_back(element);

        int childIndex = pq.size() - 1;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;

            if (pq[childIndex] < pq[parentIndex]) {
                swap(pq[childIndex], pq[parentIndex]);
            } else {
                break;
            }

            childIndex = parentIndex;
        }
    }

    int removeMin() {
        if (isEmpty()) {
            return 0; // Assuming 0 as a default value when the priority queue is empty
        }

        // Save the minimum element to return later
        int minElement = pq[0];

        // Move the last element to the root
        pq[0] = pq[pq.size() - 1];
        pq.pop_back();

        // Heapify down to maintain the heap property
        int parentIndex = 0;
        int leftChildIndex = 2 * parentIndex + 1;
        int rightChildIndex = 2 * parentIndex + 2;

        while (leftChildIndex < pq.size()) {
            int minIndex = parentIndex;

            // Find the index of the smallest child
            if (pq[leftChildIndex] < pq[minIndex]) {
                minIndex = leftChildIndex;
            }
            if (rightChildIndex < pq.size() && pq[rightChildIndex] < pq[minIndex]) {
                minIndex = rightChildIndex;
            }

            // If the parent is already smaller than both children, break
            if (minIndex == parentIndex) {
                break;
            }

            // Swap parent with the smallest child
            swap(pq[parentIndex], pq[minIndex]);

            // Update indices for next iteration
            parentIndex = minIndex;
            leftChildIndex = 2 * parentIndex + 1;
            rightChildIndex = 2 * parentIndex + 2;
        }

        return minElement;
    }
};

