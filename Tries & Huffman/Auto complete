Problem statement
Given n number of words and an incomplete word w. You need to auto-complete that word w.

That means, find and print all the possible words which can be formed using the incomplete word w.

Note : Order of words does not matter.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 <= n <= 10^5
Time Limit: 1 sec
Sample Input 1 :
7
do dont no not note notes den
no
Sample Output 1 :
no
not
note
notes
Sample Input 2 :
7
do dont no not note notes den
de
Sample Output 2 :
den
Sample Input 3 :
7
do dont no not note notes den
nom
Sample Output 3 :
(Empty) There is no word which starts with "nom"

//code
#include <iostream>
#include <vector>
using namespace std;

class TrieNode {
   public:
    char data;
    TrieNode **children;
    bool isTerminal;

    TrieNode(char data) {
        this->data = data;
        children = new TrieNode *[26];
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie {
    TrieNode *root;

   public:
    int count;

    Trie() {
        this->count = 0;
        root = new TrieNode('\0');
    }

    bool insertWord(TrieNode *root, string word) {
        if (word.size() == 0) {
            if (!root->isTerminal) {
                root->isTerminal = true;
                return true;
            } else {
                return false;
            }
        }

        int index = word[0] - 'a';
        TrieNode *child;

        if (root->children[index] != NULL) {
            child = root->children[index];
        } else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }

        return insertWord(child, word.substr(1));
    }

    void insertWord(string word) {
        if (insertWord(root, word)) {
            this->count++;
        }
    }

    void collectAllWords(TrieNode *node, string prefix, vector<string> &results) {
        if (node->isTerminal) {
            results.push_back(prefix);
        }

        for (int i = 0; i < 26; i++) {
            if (node->children[i] != NULL) {
                char nextChar = 'a' + i;
                collectAllWords(node->children[i], prefix + nextChar, results);
            }
        }
    }

    void autoComplete(vector<string> input, string pattern) {
        for (const string &word : input) {
            insertWord(word);
        }

        TrieNode *current = root;
        for (char c : pattern) {
            int index = c - 'a';
            if (current->children[index] == NULL) {
                cout << ""; // Empty output
                return;
            }
            current = current->children[index];
        }

        vector<string> results;
        collectAllWords(current, pattern, results);

        for (const string &word : results) {
            cout << word << endl;
        }
    }
};

