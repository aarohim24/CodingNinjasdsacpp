Problem statement
For a given Binary Tree of type integer and a number K, print out all root-to-leaf paths where the sum of all the node data along the path is equal to K.

Example:
alt txt

If you see in the above-depicted picture of Binary Tree, we see that there are a total of two paths, starting from the root and ending at the leaves which sum up to a value of K = 13.

The paths are:
a. 2 3 4 4
b. 2 3 8

One thing to note here is, there is another path in the right sub-tree in reference to the root, which sums up to 13 but since it doesn't end at the leaf, we discard it.
The path is: 2 9 2(not a leaf)
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
2 3 9 4 8 -1 2 4 -1 -1 -1 6 -1 -1 -1 -1 -1
13
 Sample Output 1:
2 3 4 4 
2 3 8
Sample Input 2:
5 6 7 2 3 -1 1 -1 -1 -1 9 -1 -1 -1 -1
13
 Sample Output 2:
5 6 2
5 7 1


//CODE
/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/
void printPath(const vector<int>& path) {
    for (int value : path) {
        cout << value << " ";
    }
    cout << endl;
}

void findPaths(BinaryTreeNode<int>* root, int k, vector<int>& path, int currentSum) {
    if (root == NULL) {
        return;
    }

    path.push_back(root->data);
    currentSum += root->data;
    
    if (root->left == NULL && root->right == NULL && currentSum == k) {
        printPath(path);
    }
    
    findPaths(root->left, k, path, currentSum);
    findPaths(root->right, k, path, currentSum);
    path.pop_back();
}

void rootToLeafPathsSumToK(BinaryTreeNode<int>* root, int k) {
    vector<int> path;
    findPaths(root, k, path, 0);
}

BinaryTreeNode<int>* buildTree(const vector<int>& nodes, int& index) {
    if (index >= nodes.size() || nodes[index] == -1) {
        index++;
        return NULL;
    }
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(nodes[index++]);
    root->left = buildTree(nodes, index);
    root->right = buildTree(nodes, index);
    return root;
}




