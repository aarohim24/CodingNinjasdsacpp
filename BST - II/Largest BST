Problem statement
Given a Binary tree, find the largest BST subtree. That is, you need to find the BST with maximum height in the given binary tree. You have to return the height of largest BST.

Note :
The binary tree will be consisting of only unique elements.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 ≤ Number of nodes ≤ 10^5
1 ≤ Data of a node ≤ 10^6
Time Limit: 1 second
Sample Input 1:
5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1


Sample Output 1:
2


//CODE
#include <iostream>
#include <climits>
#include <queue>
#include <algorithm>

using namespace std;

class Pair {
public:
    int minimum;
    int maximum;
    bool bst;
    int height;
};
Pair BST(BinaryTreeNode<int>* root) {
    if (root == nullptr) {
        Pair obj;
        obj.minimum = INT_MAX;
        obj.maximum = INT_MIN;
        obj.bst = true;
        obj.height = 0;
        return obj;
    }

    Pair left = BST(root->left);
    Pair right = BST(root->right);

    int minimum = min(root->data, min(left.minimum, right.minimum));
    int maximum = max(root->data, max(left.maximum, right.maximum));
    bool isBSTfinal = (root->data > left.maximum) && (root->data < right.minimum) && left.bst && right.bst;

    Pair obj;
    obj.minimum = minimum;
    obj.maximum = maximum;
    obj.bst = isBSTfinal;
    if (isBSTfinal) {
        obj.height = 1 + max(left.height, right.height);
    } else {
        obj.height = max(left.height, right.height);
    }
    return obj;
}

// Function to return the height of the largest BST subtree
int largestBSTSubtree(BinaryTreeNode<int>* root) {
    return BST(root).height;
}



