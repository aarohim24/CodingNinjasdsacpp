Problem statement
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.



Note :
Make changes in the input array itself.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9

//code
#include <iostream>

int partitionArray(int input[], int start, int end) {
    int pivot = input[end]; // Choose the last element as the pivot
    int i = start - 1; // Index of smaller element

    for (int j = start; j <= end - 1; j++) {
        if (input[j] < pivot) {
            i++;
            std::swap(input[i], input[j]);
        }
    }
    std::swap(input[i + 1], input[end]);
    return i + 1;
}

void quickSort(int input[], int start, int end) {
    if (start < end) {
        int pivotIndex = partitionArray(input, start, end);
        quickSort(input, start, pivotIndex - 1);
        quickSort(input, pivotIndex + 1, end);
    }
}

