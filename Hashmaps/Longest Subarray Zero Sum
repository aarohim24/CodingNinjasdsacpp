Problem statement
Given an array consisting of positive and negative integers, find the length of the longest subarray whose sum is zero.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 <= N <= 10^8
Time Limit: 1 sec
Sample Input 1:
10 
 95 -97 -387 -435 -5 -70 897 127 23 284
Sample Output 1:
5
Explanation:
The five elements that form the longest subarray that sum up to zero are: -387, -435, -5, -70, 897 
Note
You don't have to print anything. Just complete the definition of the function given and return the value accordingly.

//code
#include <iostream>
#include <unordered_map>

using namespace std;

int lengthOfLongestSubsetWithZeroSum(int arr[], int n) {
  if (n <= 0) {
    return 0; 
  }
  unordered_map<int, int> prefixSumMap;
  prefixSumMap[0] = -1;

  int maxLength = 0;
  int currentSum = 0;

  for (int i = 0; i < n; ++i) {
    currentSum += arr[i];
    if (prefixSumMap.count(currentSum) > 0) {
      maxLength = max(maxLength, i - prefixSumMap[currentSum]); 
    } else {
      prefixSumMap[currentSum] = i;
    }
  }

  return maxLength;
}


