Problem statement
You have been given a linked list of integers. Your task is to write a function that deletes a node from a given position, 'POS'.

Note :
Assume that the Indexing for the linked list always starts from 0.

If the position is greater than or equal to the length of the linked list, you should return the same linked list without any change.
Illustration :
The following images depict how the deletion has been performed.
Image-I :

Alt txt

Image-II :

Alt txt

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
3 4 5 2 6 1 9 -1
3
Sample Output 1 :
3 4 5 6 1 9
Explanation of Sample Output 1 :
The data in the node with index 3 is 2 which has been removed.
Sample Input 2 :
3 4 5 2 6 1 9 -1
0
Sample Output 2 :
4 5 2 6 1 9
Constraints :
0 <= N <= 10^5
POS >= 0

Time Limit: 1sec
Expected Complexity :
Time Complexity  : O(N)
Space Complexity  : O(1)


//code
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
Node *deleteNode(Node *head, int pos) {
    // If the list is empty or the position is negative, return head as it is
    if (head == NULL || pos < 0) {
        return head;
    }

    // If position is 0, delete the head node
    if (pos == 0) {
        Node *temp = head;
        head = head->next;
        delete temp;
        return head;
    }

    // Traverse the list to find the node just before the node to be deleted
    Node *prev = head;
    for (int i = 0; i < pos - 1 && prev->next != NULL; i++) {
        prev = prev->next;
    }

    // If position is greater than or equal to the length of the list, return head as it is
    if (prev == NULL || prev->next == NULL) {
        return head;
    }

    // Delete the node at the given position
    Node *temp = prev->next;
    prev->next = temp->next;
    delete temp;

    return head;
}


