Problem statement
For a given expression in the form of a string, find if there exist any redundant brackets or not. It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.

A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.

Example:
Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.

Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.
Note:
You will not get a partial score for this problem. You will get marks only if all the test cases are passed.
Return "false" if no brackets are present in the input.
Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 <= N <= 10^6
Where N is the length of the expression.

Time Limit: 1 second
Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false

//code
/* C++ Program to check whether valid 
expression is redundant or not*/
#include <bits/stdc++.h>
using namespace std;

bool checkRedundantBrackets(string& str)
{
	stack<char> st;

	for (auto& ch : str) {

		if (ch == ')') {
			char top = st.top();
			st.pop();

			bool flag = true;

			while (!st.empty() and top != '(') {
				if (top == '+' || top == '-' || 
					top == '*' || top == '/')
					flag = false;

				top = st.top();
				st.pop();
			}

			if (flag == true)
				return true;
		}

		else
			st.push(ch); // push open parenthesis '(',
	}
	return false;
}

void findRedundant(string& str)
{
	bool ans = checkRedundantBrackets(str);
	if (ans == true)
		cout << "Yes\n";
	else
		cout << "No\n";
}

