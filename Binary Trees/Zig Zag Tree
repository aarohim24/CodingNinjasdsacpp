Problem statement
Given a binary tree, print the zig zag order. In zigzag order, level 1 is printed from left to right, level 2 from right to left and so on. This means odd levels should get printed from left to right and even level right to left.

Detailed explanation ( Input/output format, Notes, Images )
Constraints
Time Limit: 1 second
Sample Input :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output :
5
10 6
2 3
9

//code
/**********************************************************
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/


#include <iostream>
#include <stack>
#include <vector>
using namespace std;

void zigZagOrder(BinaryTreeNode<int> *root) {
    if (root == NULL) {
        return;
    }

    stack<BinaryTreeNode<int>*> currentLevel;
    stack<BinaryTreeNode<int>*> nextLevel;
    currentLevel.push(root);
    bool leftToRight = true;

    while (!currentLevel.empty()) {
        BinaryTreeNode<int>* node = currentLevel.top();
        currentLevel.pop();

        if (node != NULL) {
            cout << node->data << " ";

            if (leftToRight) {
                if (node->left) {
                    nextLevel.push(node->left);
                }
                if (node->right) {
                    nextLevel.push(node->right);
                }
            } else {
                if (node->right) {
                    nextLevel.push(node->right);
                }
                if (node->left) {
                    nextLevel.push(node->left);
                }
            }
        }

        if (currentLevel.empty()) {
            cout << endl;
            leftToRight = !leftToRight;
            swap(currentLevel, nextLevel);
        }
    }
}


