Problem statement
Gary has two string S and V. Now, Gary wants to know the length shortest subsequence in S, which is not a subsequence in V.

Note: The input data will be such that there will always be a solution.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
1 <= |S| <= 1000 (|x| implies the length of the string x)
1 <= |V| <= 1000 
Time Limit: 1 second
Sample Input 1:
babab
babba
Sample Output 1:
3
Explanation:
"aab" is the shortest subsequence which is present in S and absent in V.

//code
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int solve(string s, string v) {
    int n = s.size();
    int m = v.size();

    vector<vector<int>> dp(n + 1, vector<int>(m + 1, 1001));
    
    for (int i = 0; i <= n; i++) {
        dp[i][0] = 1;
    }
    
    for (int j = 1; j <= m; j++) {
        dp[0][j] = 1001;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            char ch = s[i-1];
            int k;
            for (k = j-1; k >= 0; k--) {
                if (v[k] == ch) {
                    break;
                }
            }
            if (k == -1) {
                dp[i][j] = 1;
            } else {
                dp[i][j] = min(dp[i-1][j], 1 + dp[i-1][k]);
            }
        }
    }
    
    return dp[n][m];
}
