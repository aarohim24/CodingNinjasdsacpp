Problem statement
You are given a N*N maze with a rat placed at maze[0][0]. Find whether any path exist that rat can follow to reach its destination i.e. maze[N-1][N-1]. Rat can move in any direc­tion ( left, right, up and down).

Value of every cell in the maze can either be 0 or 1. Cells with value 0 are blocked means rat can­not enter into those cells and those with value 1 are open.

Detailed explanation ( Input/output format, Notes, Images )
Constraints:
0 < N < 11 0 <= Maze[i][j] <=1

Time Limit: 1sec
Sample Input 1 :
3
1 0 1
1 0 1
1 1 1
Sample Output 1 :
true
Sample Input 2 :
3
1 0 1
1 0 1
0 1 1
Sample Output 2 :
 false

//Code


#include <iostream>
#include <vector>

using namespace std;

bool isValidMove(int x, int y, int n, vector<vector<int>>& maze, vector<vector<bool>>& visited) {
    return (x >= 0 && x < n && y >= 0 && y < n && maze[x][y] == 1 && !visited[x][y]);
}

bool findPath(int x, int y, int n, vector<vector<int>>& maze, vector<vector<bool>>& visited) {
    if (x == n - 1 && y == n - 1) {
        return true;
    }
    
    visited[x][y] = true;
    
    int dx[] = {0, 1, 0, -1};
    int dy[] = {1, 0, -1, 0};
    
    for (int i = 0; i < 4; i++) {
        int newX = x + dx[i];
        int newY = y + dy[i];
        
        if (isValidMove(newX, newY, n, maze, visited)) {
            if (findPath(newX, newY, n, maze, visited)) {
                return true;
            }
        }
    }
    
    visited[x][y] = false;
    return false;
}

bool ratInAMaze(int maze[20][20], int n) {
    vector<vector<int>> vecMaze(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            vecMaze[i][j] = maze[i][j];
        }
    }

    vector<vector<bool>> visited(n, vector<bool>(n, false));
    
    return findPath(0, 0, n, vecMaze, visited);
}
