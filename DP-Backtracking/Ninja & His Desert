int close(int a, int b, int target)
{
    if(a==0){
        return b;
    }
    if(b==0){
        return a;
    }

    if (abs(target - a) == abs(target - b)) {
        return a < b ? a : b;
    }
    return (abs(target - a) < abs(target - b) ? a : b);
}

int dfs(vector<int> &top, int i, int sum, int target){
    if (i>= top.size())
    return sum;

    int a = dfs(top, i+1, sum+top[i],target);

    int b = dfs(top, i+1, sum+top[i] * 2 ,target);

    int c = dfs(top, i+1, sum,target);

sum=close(a,close(b,c,target), target);
return sum;
}

int closestCost(int n, int m, vector<int> &baseCosts, vector<int> &toppingCosts, int target){
    int ans = 0;

    for (int i = 0; i < n; i++) {
    ans = close(dfs(toppingCosts, 0, baseCosts[i], target), ans, target);
    }
    return ans;
}
